@model List<WebApplication6.Models.Library>

@{
    var allItems = new List<WebApplication6.Models.LibraryItem>();
    var allCategories = new HashSet<string>();

    foreach (var lib in Model)
    {
        if (lib.Items != null)
        {
            allItems.AddRange(lib.Items);

            foreach (var item in lib.Items)
            {
                if (item.Game.GameCatagories != null)
                {
                    foreach (var gc in item.Game.GameCatagories)
                    {
                        var name = gc.Catagory?.Name?.ToLower().Replace(" ", "").Replace("ə", "e").Replace("ü", "u").Replace("i", "i").Replace("o", "o").Replace("c", "c").Replace("s", "s");
                        if (!string.IsNullOrEmpty(name))
                            allCategories.Add(name);
                    }
                }
            }
        }
    }
}

<!DOCTYPE html>
<html lang="az">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>My Library</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #1b2838;
            color: #c6d4df;
        }

        .library-header {
            background-color: #2a475e;
            height: 250px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: #66c0f4;
            font-size: 2.5rem;
            font-weight: 800;
            margin-bottom: 30px;
            font-family: 'Poppins', sans-serif;
        }

        .library-container {
            display: flex;
            min-height: calc(100vh - 280px);
            position: relative;
        }


        .sidebar {
            width: 250px;
            background-color: #171a21;
            padding: 20px;
            overflow-y: visible; 
            position: sticky;
            top: 0;
            height: auto; 
            border-right: 1px solid #2a475e;
        }


        .main-content {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .game-card {
            transition: all 0.3s ease;
            border: none;
            border-radius: 10px;
            overflow: hidden;
            background-color: #1e2329;
            height: 100%;
        }

            .game-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0,0,0,0.2);
            }

        .game-image {
            height: 180px;
            object-fit: cover;
            width: 100%;
        }

        .play-btn {
            transition: all 0.2s;
        }

            .play-btn:hover {
                transform: scale(1.05);
            }

        .filter-btns {
            margin-bottom: 30px;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

            .filter-btns button {
                margin: 0;
            }

            .filter-btns .active {
                background-color: #66c0f4;
                color: #1b2838;
            }

        .game-list-item {
            padding: 10px 15px;
            border-radius: 5px;
            margin-bottom: 5px;
            transition: all 0.2s;
        }

            .game-list-item:hover {
                background-color: #2a475e;
                color: #ffffff;
                cursor: pointer;
                transform: translateX(5px);
            }

        .games-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }

        @@media (max-width: 992px) {
            .library-container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
                border-right: none;
                border-bottom: 1px solid #2a475e;
            }

            .main-content {
                padding-top: 20px;
            }

            .games-grid {
                grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            }
        }

        @@media (max-width: 576px) {
            .games-grid {
                grid-template-columns: 1fr;
            }
        } 
        #gameSearch {
            background-color: #1e2329;
            color: #c6d4df;
            border: 1px solid #2a475e;
            padding: 10px;
            border-radius: 5px;
            width: 100%;
            box-sizing: border-box;
            margin-bottom: 15px;
        }

    </style>
</head>
<body>
    <div class="library-header">
        My Library
    </div>

    <div class="library-container">
       
        <div class="sidebar">
            <h5>Games</h5>
            <input type="text" id="gameSearch" class="form-control mb-3 bg-dark text-white border-secondary" placeholder="Search games..." />
            <div id="gameList" style="max-height: calc(100% - 60px); overflow-y: auto;">
                @foreach (var item in allItems.OrderBy(i => i.Game.Name))
                {
                    <div class="game-list-item" data-name="@item.Game.Name.ToLower()">
                        @item.Game.Name
                    </div>
                }
            </div>
        </div>

        <div class="main-content">
            @if (!allItems.Any())
            {
                <div class="alert alert-info text-center">
                    <i class="bi bi-info-circle"></i> YOU DON'T HAVE ANY GAMES
                </div>
            }
            else
            {

                <div class="filter-btns">
                    <button class="btn btn-outline-primary active" data-filter="all">All</button>
                    @foreach (var cat in allCategories)
                    {
                        <button class="btn btn-outline-secondary" data-filter="@cat">@cat.ToUpper()</button>
                    }
                </div>

                <div class="games-grid">
                    @foreach (var item in allItems)
                    {
                        var categoryClasses = string.Join(" ", item.Game.GameCatagories?.Select(gc => gc.Catagory?.Name.ToLower().Replace(" ", "").Replace("ə", "e").Replace("ü", "u").Replace("i", "i").Replace("o", "o").Replace("c", "c").Replace("s", "s")) ?? new List<string>());

                        <div class="game-card-wrapper @categoryClasses">
                            <div class="card h-100 game-card">
                                <img src="@(item.Game.GameImages.FirstOrDefault()?.ImageUrl ?? "/images/default.jpg")" alt="@item.Game.Name" class="card-img-top game-image" />

                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">@item.Game.Name</h5>
                                    <div class="d-flex justify-content-between align-items-center mb-3 mt-auto">

                                        <button class="btn btn-primary play-btn">
                                            <i class="bi bi-controller"></i> PLAY
                                        </button>
                                    </div>

                                    @if (item.Game.GameCatagories?.Any() == true)
                                    {
                                        <div>
                                            <small class="text-muted">Categories</small>
                                            <div class="d-flex flex-wrap gap-1 mt-1">
                                                @foreach (var gc in item.Game.GameCatagories.Take(3))
                                                {
                                                    <span class="badge bg-secondary">@gc.Catagory.Name</span>
                                                }
                                                @if (item.Game.GameCatagories.Count > 3)
                                                {
                                                    <span class="badge bg-light text-dark">+@(item.Game.GameCatagories.Count - 3)</span>
                                                }
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <small class="text-muted">No categories</small>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <script>

        document.querySelectorAll('.filter-btns button').forEach(btn => {
            btn.addEventListener('click', function () {
                document.querySelectorAll('.filter-btns button').forEach(b => b.classList.remove('active'));
                this.classList.add('active');

                const filter = this.getAttribute('data-filter');
                const items = document.querySelectorAll('.game-card-wrapper');

                items.forEach(item => {
                    if (filter === 'all' || item.classList.contains(filter)) {
                        item.style.display = 'block';
                    } else {
                        item.style.display = 'none';
                    }
                });
            });
        });


        document.getElementById("gameSearch").addEventListener("keyup", function () {
            const filter = this.value.toLowerCase();
            const items = document.querySelectorAll("#gameList .game-list-item");

            items.forEach(item => {
                const name = item.getAttribute("data-name");
                item.style.display = name.includes(filter) ? "block" : "none";
            });
        });


        document.querySelectorAll(".game-list-item").forEach(listItem => {
            listItem.addEventListener("click", function () {
                const gameName = this.textContent.trim().toLowerCase();
                const cards = document.querySelectorAll(".game-card-wrapper");

                cards.forEach(card => {
                    const cardTitle = card.querySelector(".card-title")?.textContent.trim().toLowerCase();
                    if (cardTitle === gameName) {
                        card.scrollIntoView({ behavior: 'smooth', block: 'center' });

                        card.style.boxShadow = '0 0 0 3px rgba(0, 123, 255, 0.5)';
                        setTimeout(() => {
                            card.style.boxShadow = '';
                        }, 2000);
                    }
                });
            });
        });
    </script>
</body>
</html>
